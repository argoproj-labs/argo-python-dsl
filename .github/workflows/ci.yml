name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    - release-*

jobs:
  test:
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    if: >-
      !contains(github.event.head_commit.message, 'doc') ||
      !contains(github.event.head_commit.message, 'release') ||
      !contains(github.event.head_commit.message, '!ignore') ||
      !contains(github.event.head_commit.message, '!minor') ||
      !contains(github.event.head_commit.message, '!refactor') ||
      !contains(github.event.head_commit.message, '!wip')

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get install tree

        mkdir -p $HOME/.local/bin

        # fix permissions
        export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

        sudo find . -type f -exec chmod 666 {} \;
        sudo find . -type d -exec chmod 774 {} \;
        sudo find $HOME/.local -type f -exec chmod 666 {} \;
        sudo find $HOME/.local -type d -exec chmod 774 {} \;

        sudo chown -R $USER:$USER $HOME/.local

        #s2i
        curl \
          -L https://github.com/openshift/source-to-image/releases/download/v1.2.0/source-to-image-v1.2.0-2a579ecd-linux-amd64.tar.gz \
          -o release.tar.gz
        tar -C $HOME/.local/bin -xvf release.tar.gz

        # python dependencies
        python -m pip install --user --upgrade pip pipenv
        pip install --user -r requirements-test.txt

    # - name: Lint with flake8instance
    #   run: |
    #     pip install flake8
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test
      run: |
        export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

        # run tests
        pytest
        # bash tests/test-notebooks.sh
    - name: Install Argo CLI
      run: |
        curl -sLO https://github.com/argoproj/argo/releases/download/v2.11.1/argo-linux-amd64.gz
        gunzip argo-linux-amd64.gz
        chmod +x argo-linux-amd64
        sudo mv ./argo-linux-amd64 /usr/local/bin/argo
    - uses: opsgang/ga-setup-minikube@v0.1.1
      with:
          minikube-version: 1.11.0
          k8s-version: 1.18.3
    - name: Integration tests
      run: |
        minikube config set vm-driver docker
        minikube config set kubernetes-version 1.18.3
        minikube start

        kubectl create ns argo
        kubectl create sa default -n argo
        kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo/v2.11.1/manifests/quick-start-minimal.yaml
        kubectl wait -n argo --for=condition=Ready pods --all --timeout=300s

        chmod +x scripts/integration_tests.sh
        scripts/integration_tests.sh
